name: CI

on:
  push:
    branches: [main, master]
    tags: ["*"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  binary_test:
    name: Julia ${{ matrix.version }} ${{ matrix.llvm_args }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version: ['1.10', 'pre', 'nightly']
        os: ['ubuntu-latest', 'macOS-latest', 'windows-latest']
        arch: [x64]
        llvm_args: ['']
        include:
          # starting with Julia 1.10, we can enable opaque pointers
          - version: '1.10'
            os: 'ubuntu-latest'
            arch: 'x64'
            llvm_args: '--opaque-pointers'
          - version: '1.10'
            os: 'macOS-latest'
            arch: 'x64'
            llvm_args: '--opaque-pointers'
          - version: '1.10'
            os: 'windows-latest'
            arch: 'x64'
            llvm_args: '--opaque-pointers'
          - version: 'pre'
            os: 'ubuntu-latest'
            arch: 'x64'
            llvm_args: '--opaque-pointers'
          - version: 'pre'
            os: 'macOS-latest'
            arch: 'x64'
            llvm_args: '--opaque-pointers'
          - version: 'pre'
            os: 'windows-latest'
            arch: 'x64'
            llvm_args: '--opaque-pointers'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # build_ci.jl needs to be able to inspect the git log

      # install Julia
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      # set-up packages
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: mingw-w64-x86_64-gcc
        if: runner.os == 'Windows'

      - name: Build libLLVMExtra
        run: julia --project=deps deps/build_ci.jl
        if: runner.os != 'Windows'
      - name: Build libLLVMExtra (in msys2)
        shell: msys2 {0}
        run: julia --project=deps deps/build_ci.jl
        if: runner.os == 'Windows'

      - name: Run tests
        run: |
          julia -e 'open("LocalPreferences.toml", "a") do io
                      println(io, "typecheck = \"true\"")
                      println(io, "memcheck = \"true\"")
                    end'
          julia --project -e 'using Pkg; Pkg.test(; coverage=true)'
        env:
          JULIA_LLVM_ARGS: ${{ matrix.llvm_args }}
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          file: lcov.info

  # fetching builds from Buildkite
  assert_test:
    name: Julia ${{ matrix.branch }} ${{ matrix.llvm_args }} - ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x64]
        branch: ['master']
        pipeline: ['julia-master']
        build: ['x86_64-linux-gnuassert']
        llvm_args: ['']
        include:
          - branch: 'release-1.11'
            pipeline: 'julia-release-1-dot-11'
            build: 'x86_64-linux-gnuassert'
            llvm_args: '--opaque-pointers'
            os: 'ubuntu-latest'
            arch: 'x64'
          - branch: 'release-1.11'
            pipeline: 'julia-release-1-dot-11'
            build: 'x86_64-linux-gnuassert'
            llvm_args: ''
            os: 'ubuntu-latest'
            arch: 'x64'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # build_ci.jl needs to be able to inspect the git log

      # XXX: secrets can't be used in `if` conditions directly, so we need a dedicated step
      #      to check token availability and use the result in _every_ subsequent step...
      - name: Check for Buildkite token
        id: buildkite-token
        shell: bash
        run: |
          if [ "${{ secrets.BUILDKITE_TOKEN }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi

      - name: Download Julia
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}
        env:
          BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
        run: |
          ./.github/download_build.sh ${{ matrix.pipeline }} ${{ matrix.branch }} build_${{ matrix.build }} julia.tar.gz
          tar -xf julia.tar.gz -C ../
          rm julia.tar.gz
          echo $PWD/../julia-*/bin >> $GITHUB_PATH

      # set-up packages
      - uses: actions/cache@v4
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}

      - name: Build libLLVMExtra
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}
        run: julia --project=deps deps/build_ci.jl

      - name: Run tests
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}
        run: |
          julia -e 'open("LocalPreferences.toml", "a") do io
                      println(io, "typecheck = \"true\"")
                      println(io, "memcheck = \"true\"")
                    end'
          julia --project -e 'using Pkg; Pkg.test(; coverage=true)'
        env:
          JULIA_LLVM_ARGS: ${{ matrix.llvm_args }}
      - uses: julia-actions/julia-processcoverage@v1
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}
      - uses: codecov/codecov-action@v4
        if: ${{ steps.buildkite-token.outputs.available == 'true' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          file: lcov.info

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@latest
        with:
          version: '1.10'
      - name: Install dependencies
        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        run: julia --project=docs/ docs/make.jl
