name: CI
on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:
jobs:
  binary_test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version: ['1.6', '1.7', '1.8', '1.9.0-beta2', 'nightly']
        os: [ubuntu-latest, macOS-latest, windows-latest]
        arch: [x64]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # build_ci.jl needs to be able to inspect the git log
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1

      - name: Build libLLVMExtra
        run: julia --project=deps deps/build_ci.jl
        if: runner.os != 'Windows'

      # we really don't want to use MSVC
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: mingw-w64-x86_64-gcc
        if: runner.os == 'Windows'
      - name: Build libLLVMExtra (in msys2)
        shell: msys2 {0}
        run: julia --project=deps deps/build_ci.jl
        if: runner.os == 'Windows'

      - name: Run tests
        run: julia --project -e 'using Pkg; Pkg.test(; coverage=true, julia_args=`-g2`)'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info

  # development versions, built from source (with assertions enabled)
  # XXX: skip 1.6 as that requires gfortran, which isn't available on macOS runners
  # XXX: build Windows using mingw or msys2
  source_test:
    name: Julia ${{ matrix.branch }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        branch: ['release-1.7', 'release-1.8', 'release-1.9', 'master', 'vc/upgrade_llvm15']
        os: [ubuntu-latest, macOS-latest]
        arch: [x64]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # build_ci.jl needs to be able to inspect the git log
      - uses: actions/checkout@v3
        with:
          repository: 'JuliaLang/julia'
          ref: ${{ matrix.branch }}
          path: 'julia'
      - name: Compile Julia
        run: |
          sed -i.bak 's/exit 2/exit 0/g' julia/deps/tools/jlchecksum
          make -C julia -j $(nproc) FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 JULIA_PRECOMPILE=0
          echo $PWD/julia/usr/bin >> $GITHUB_PATH
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1

      - name: Build libLLVMExtra
        run: julia --project=deps deps/build_ci.jl
        if: runner.os != 'Windows'

      - name: Run tests
        run: julia --project -e 'using Pkg; Pkg.test(; coverage=true, julia_args=`-g2`)'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@latest
        with:
          version: '1.6'
      - name: Install dependencies
        run: julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        run: julia --project=docs/ docs/make.jl
